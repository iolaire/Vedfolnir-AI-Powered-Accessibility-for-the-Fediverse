# Vedfolnir Configuration Template
# Copy this file to .env and configure your settings

# =============================================================================
# CORE APPLICATION SETTINGS
# =============================================================================

# Flask Application
FLASK_HOST=127.0.0.1
FLASK_PORT=5000
FLASK_DEBUG=false

# Flask Secret Key - REQUIRED for session security and CSRF protection
# Generate a secure key using: python3 -c "import secrets; print(secrets.token_urlsafe(32))"
# NEVER use the example value below in production!
FLASK_SECRET_KEY=CHANGE_ME_TO_A_SECURE_32_CHAR_SECRET_KEY

# Database Configuration
DATABASE_URL=sqlite:///storage/database/vedfolnir.db

# =============================================================================
# AI/ML CONFIGURATION
# =============================================================================

# Ollama Configuration
OLLAMA_URL=http://localhost:11434
OLLAMA_MODEL=llava:7b
OLLAMA_TIMEOUT=60.0

# =============================================================================
# CAPTION GENERATION SETTINGS
# =============================================================================

# Caption Configuration
CAPTION_MAX_LENGTH=500
CAPTION_OPTIMAL_MIN_LENGTH=150
CAPTION_OPTIMAL_MAX_LENGTH=450

# Enhanced Image Classification
USE_ENHANCED_CLASSIFICATION=true
CLASSIFICATION_CONFIDENCE_THRESHOLD=0.7
LLAVA_CLASSIFICATION_TEMPERATURE=0.1

# Fallback Configuration
FALLBACK_ENABLED=true
FALLBACK_MAX_ATTEMPTS=2
FALLBACK_USE_SIMPLIFIED_PROMPTS=true
FALLBACK_USE_BACKUP_MODEL=true
FALLBACK_BACKUP_MODEL=llava:13b-v1.6

# =============================================================================
# PROCESSING CONFIGURATION
# =============================================================================

# Processing Limits
MAX_POSTS_PER_RUN=10
MAX_USERS_PER_RUN=10
USER_PROCESSING_DELAY=5
DRY_RUN=true

# Batch Update Configuration
BATCH_UPDATE_ENABLED=true
BATCH_UPDATE_SIZE=5
BATCH_UPDATE_MAX_CONCURRENT=2
BATCH_UPDATE_VERIFICATION_DELAY=2
BATCH_UPDATE_ROLLBACK_ON_FAILURE=true

# =============================================================================
# RETRY AND RATE LIMITING
# =============================================================================

# Retry Configuration
RETRY_MAX_ATTEMPTS=3
RETRY_BASE_DELAY=1.0
RETRY_MAX_DELAY=30.0
RETRY_BACKOFF_FACTOR=2.0
RETRY_USE_JITTER=true
RETRY_JITTER_FACTOR=0.1
RETRY_ON_TIMEOUT=true
RETRY_ON_CONNECTION_ERROR=true
RETRY_ON_SERVER_ERROR=true
RETRY_ON_RATE_LIMIT=true
RETRY_SPECIFIC_ERRORS=connection reset by peer,connection refused,temporary failure

# Rate Limiting Configuration
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_REQUESTS_PER_HOUR=1000
RATE_LIMIT_REQUESTS_PER_DAY=10000
RATE_LIMIT_MAX_BURST=10

# Endpoint-specific rate limits
RATE_LIMIT_ENDPOINT_MEDIA_MINUTE=30
RATE_LIMIT_ENDPOINT_MEDIA_HOUR=300
RATE_LIMIT_ENDPOINT_STATUSES_MINUTE=60
RATE_LIMIT_ENDPOINT_STATUSES_HOUR=600

# =============================================================================
# AUTHENTICATION AND SECURITY
# =============================================================================

# Authentication Configuration
AUTH_REQUIRE_AUTH=true
AUTH_SESSION_LIFETIME=86400
AUTH_REMEMBER_COOKIE_DURATION=2592000

# Admin User Credentials - Managed in Database
# Admin user credentials are created and stored in the database, not in this file.
# Use the setup script to create the admin user: python3 scripts/setup/generate_env_secrets.py

# Platform Encryption Key - REQUIRED for encrypting stored platform credentials
# Generate using: python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
# This key encrypts API tokens and credentials stored in the database
# If lost, all stored platform credentials become unrecoverable
# NEVER use the example value below in production!
PLATFORM_ENCRYPTION_KEY=CHANGE_ME_TO_A_FERNET_ENCRYPTION_KEY

# SECURITY WARNING: 
# - Copy this file to .env and replace ALL example values with secure, unique values
# - The .env file is gitignored and should never be committed to version control
# - See docs/security/environment-setup.md for detailed setup instructions
# - Use the provided scripts in scripts/setup/ to generate secure values automatically

# =============================================================================
# STORAGE AND LOGGING
# =============================================================================

# Storage Configuration
STORAGE_BASE_DIR=storage
STORAGE_IMAGES_DIR=storage/images
STORAGE_DATABASE_DIR=storage/database
LOGS_DIR=logs

# Logging Configuration
LOG_LEVEL=INFO

# Database Performance Configuration
DB_POOL_SIZE=5
DB_MAX_OVERFLOW=10
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=1800
DB_QUERY_LOGGING=false

# Data Retention Configuration (in days)
RETENTION_PROCESSING_RUNS=90
RETENTION_REJECTED_IMAGES=30
RETENTION_POSTED_IMAGES=180
RETENTION_ERROR_IMAGES=60

# =============================================================================
# PLATFORM CONNECTIONS
# =============================================================================
# Platform-specific settings (URLs, tokens, credentials) are now managed
# through the web interface for better security and ease of use.
#
# To configure platform connections:
# 1. Start the web application: python web_app.py
# 2. Go to Platform Management in the web interface
# 3. Click \"Add Platform\" to configure your connections
# 4. Enter your platform details and credentials
# 5. Test the connection to ensure it works
#
# Supported platforms:
# - Pixelfed: Requires instance URL, username, and access token
# - Mastodon: Requires instance URL, username, access token, and OAuth credentials
#
# All credentials are encrypted and stored securely in the database.
# No platform credentials should be stored in this .env file.