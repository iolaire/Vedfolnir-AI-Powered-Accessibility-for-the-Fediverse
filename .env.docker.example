# Vedfolnir Docker Environment Configuration
# This file contains Docker-specific environment variable examples
# Use with docker-compose for containerized deployment

# =============================================================================
# DOCKER ENVIRONMENT SETTINGS
# =============================================================================

# Environment Type
ENVIRONMENT=docker
FLASK_ENV=production
FLASK_DEBUG=false

# Application Settings
FLASK_HOST=0.0.0.0
FLASK_PORT=5000
APP_VERSION=1.0.0-docker

# Security Keys (Generate secure values for Docker deployment)
FLASK_SECRET_KEY=REPLACE_WITH_SECURE_SECRET_KEY
PLATFORM_ENCRYPTION_KEY=REPLACE_WITH_SECURE_ENCRYPTION_KEY

# =============================================================================
# DOCKER MYSQL CONFIGURATION
# =============================================================================

# Docker MySQL Service Configuration
DB_TYPE=mysql
DB_NAME=vedfolnir
DB_USER=vedfolnir
DB_PASSWORD=REPLACE_WITH_SECURE_MYSQL_PASSWORD
DB_HOST=mysql                            # Docker service name
DB_PORT=3306

# Docker Database URL (using service name)
DATABASE_URL=mysql+pymysql://vedfolnir:SECURE_PASSWORD@mysql:3306/vedfolnir?charset=utf8mb4

# Docker Connection Pool Settings
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=40
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=3600
DB_POOL_PRE_PING=true
DB_QUERY_LOGGING=false

# MySQL Docker Settings
MYSQL_CHARSET=utf8mb4
MYSQL_COLLATION=utf8mb4_unicode_ci
MYSQL_ENGINE=InnoDB

# MySQL Root Password (for Docker MySQL container)
MYSQL_ROOT_PASSWORD=REPLACE_WITH_SECURE_ROOT_PASSWORD

# =============================================================================
# DOCKER REDIS CONFIGURATION
# =============================================================================

# Docker Redis Service Configuration
REDIS_URL=redis://:SECURE_REDIS_PASSWORD@redis:6379/0
REDIS_HOST=redis                         # Docker service name
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=REPLACE_WITH_SECURE_REDIS_PASSWORD
REDIS_SSL=false                          # SSL handled by Docker network

# Docker Session Settings
REDIS_SESSION_PREFIX=vedfolnir_docker:session:
REDIS_SESSION_TIMEOUT=7200
SESSION_COOKIE_SECURE=true              # Assuming HTTPS termination at proxy

# Redis Connection Pool
REDIS_POOL_MAX_CONNECTIONS=50
REDIS_POOL_RETRY_ON_TIMEOUT=true

# =============================================================================
# DOCKER OLLAMA CONFIGURATION
# =============================================================================

# Docker Ollama Service Configuration
OLLAMA_URL=http://ollama:11434           # Docker service name
OLLAMA_MODEL=llava:7b
OLLAMA_TIMEOUT=90.0                      # Longer timeout for container startup
OLLAMA_MAX_CONCURRENT_REQUESTS=5

# =============================================================================
# DOCKER LOGGING CONFIGURATION
# =============================================================================

# Docker Logging (structured for container logs)
LOG_LEVEL=INFO
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s

# Container-specific logging
MYSQL_LOG_QUERIES=false
MYSQL_LOG_SLOW_QUERIES=true
MYSQL_LOG_CONNECTION_EVENTS=false

# =============================================================================
# DOCKER SECURITY SETTINGS
# =============================================================================

# Security Features (enabled for Docker)
SECURITY_CSRF_ENABLED=true
SECURITY_RATE_LIMITING_ENABLED=true
SECURITY_INPUT_VALIDATION_ENABLED=true
SECURITY_HEADERS_ENABLED=true
SECURITY_SESSION_VALIDATION_ENABLED=true
SECURITY_ADMIN_CHECKS_ENABLED=true

# Docker Authentication
AUTH_REQUIRE_AUTH=true
AUTH_SESSION_LIFETIME=28800

# =============================================================================
# DOCKER HEALTH CHECKS
# =============================================================================

# Docker Health Check Configuration
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_INTERVAL=30
HEALTH_CHECK_TIMEOUT=10

# Component Health Checks
HEALTH_CHECK_MYSQL=true
HEALTH_CHECK_REDIS=true
HEALTH_CHECK_OLLAMA=true
HEALTH_CHECK_DISK_SPACE=true

# Docker-specific Health Check Settings
DOCKER_HEALTH_CHECK_INTERVAL=30s
DOCKER_HEALTH_CHECK_TIMEOUT=10s
DOCKER_HEALTH_CHECK_RETRIES=3
DOCKER_HEALTH_CHECK_START_PERIOD=40s

# =============================================================================
# DOCKER STORAGE CONFIGURATION
# =============================================================================

# Docker Volume Paths (container internal paths)
STORAGE_BASE_DIR=/app/storage
STORAGE_IMAGES_DIR=/app/storage/images
LOGS_DIR=/app/logs
MYSQL_BACKUP_DIR=/app/backups

# Docker-specific settings
DOCKER_DEPLOYMENT=true
CONTAINER_NAME=vedfolnir_app

# =============================================================================
# DOCKER PERFORMANCE SETTINGS
# =============================================================================

# Docker Performance Configuration
CACHE_ENABLED=true
CACHE_TYPE=redis
CACHE_DEFAULT_TIMEOUT=300

# Resource Limits (appropriate for containers)
MAX_CONTENT_LENGTH=16777216             # 16MB
MAX_FORM_MEMORY_SIZE=2097152           # 2MB

# Processing Settings (container optimized)
MAX_POSTS_PER_RUN=20
MAX_USERS_PER_RUN=10
USER_PROCESSING_DELAY=3

# =============================================================================
# DOCKER MONITORING
# =============================================================================

# Monitoring Configuration
METRICS_ENABLED=true
METRICS_INTERVAL=60
PERFORMANCE_MONITORING=true

# MySQL Monitoring
MYSQL_PERFORMANCE_MONITORING=true
MYSQL_SLOW_QUERY_THRESHOLD=2.0
MYSQL_CONNECTION_MONITORING=true

# =============================================================================
# DOCKER NETWORK CONFIGURATION
# =============================================================================

# Docker Network Settings
# These are typically handled by docker-compose.yml but can be overridden

# Internal service communication (no SSL needed within Docker network)
MYSQL_SSL_ENABLED=false
REDIS_SSL=false

# External SSL termination (handled by reverse proxy)
SESSION_COOKIE_SECURE=true
SECURITY_HEADERS_ENABLED=true

# =============================================================================
# DOCKER ENVIRONMENT VARIABLES FOR SERVICES
# =============================================================================

# MySQL Container Environment Variables
# (These should match your docker-compose.yml MySQL service)
MYSQL_DATABASE=vedfolnir
MYSQL_USER=vedfolnir
MYSQL_PASSWORD=REPLACE_WITH_SECURE_MYSQL_PASSWORD
MYSQL_ROOT_PASSWORD=REPLACE_WITH_SECURE_ROOT_PASSWORD

# Redis Container Environment Variables
# (These should match your docker-compose.yml Redis service)
REDIS_PASSWORD=REPLACE_WITH_SECURE_REDIS_PASSWORD

# =============================================================================
# DOCKER COMPOSE INTEGRATION
# =============================================================================

# Docker Compose Service Dependencies
# These environment variables help with service orchestration

# Wait for services to be ready
WAIT_FOR_MYSQL=true
WAIT_FOR_REDIS=true
WAIT_FOR_OLLAMA=true

# Service readiness timeouts
MYSQL_READY_TIMEOUT=60
REDIS_READY_TIMEOUT=30
OLLAMA_READY_TIMEOUT=120

# =============================================================================
# DOCKER DEVELOPMENT OVERRIDES
# =============================================================================

# Development Docker Settings (uncomment for development)
# FLASK_DEBUG=true
# LOG_LEVEL=DEBUG
# MYSQL_LOG_QUERIES=true
# DEVELOPMENT_MODE=true
# DRY_RUN=true

# Development Volume Mounts (for code changes without rebuild)
# DEVELOPMENT_VOLUME_MOUNT=true

# =============================================================================
# DOCKER PRODUCTION OVERRIDES
# =============================================================================

# Production Docker Settings
PRODUCTION_MODE=true
OPTIMIZE_FOR_PRODUCTION=true

# Production Security
FLASK_DEBUG=false
LOG_LEVEL=WARNING
MYSQL_LOG_QUERIES=false

# Production Performance
ENABLE_GZIP_COMPRESSION=true
STATIC_FILE_CACHING=true
TEMPLATE_CACHING=true

# =============================================================================
# DOCKER DEPLOYMENT INSTRUCTIONS
# =============================================================================

# DOCKER DEPLOYMENT STEPS:
# 1. Copy this file to .env: cp .env.docker.example .env
# 2. Replace all REPLACE_WITH_SECURE_* values with actual secure values
# 3. Create docker-compose.yml with MySQL, Redis, and Ollama services
# 4. Build and start containers: docker-compose up -d --build
# 5. Initialize database: docker-compose exec vedfolnir python -c "from database import init_db; init_db()"
# 6. Create admin user: docker-compose exec vedfolnir python scripts/setup/init_admin_user.py
# 7. Check health: docker-compose exec vedfolnir curl http://localhost:5000/health

# DOCKER COMPOSE EXAMPLE SERVICES:
# services:
#   vedfolnir:
#     build: .
#     environment:
#       - DATABASE_URL=mysql+pymysql://vedfolnir:${MYSQL_PASSWORD}@mysql:3306/vedfolnir?charset=utf8mb4
#       - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
#     depends_on:
#       - mysql
#       - redis
#       - ollama
#
#   mysql:
#     image: mysql:8.0
#     environment:
#       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#       MYSQL_DATABASE: vedfolnir
#       MYSQL_USER: vedfolnir
#       MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#     volumes:
#       - mysql_data:/var/lib/mysql
#
#   redis:
#     image: redis:7-alpine
#     command: redis-server --requirepass ${REDIS_PASSWORD}
#     volumes:
#       - redis_data:/data
#
#   ollama:
#     image: ollama/ollama:latest
#     volumes:
#       - ollama_data:/root/.ollama

# DOCKER SECURITY NOTES:
# - Use Docker secrets for sensitive values in production
# - Implement proper network segmentation
# - Use non-root users in containers
# - Regularly update base images
# - Scan images for vulnerabilities
# - Use multi-stage builds to minimize attack surface
# - Implement proper logging and monitoring
# - Use read-only root filesystems where possible
