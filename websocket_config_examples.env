# WebSocket Configuration Examples
# Generated by WebSocket Configuration System
# Generated at: 2025-01-28T16:00:00

# This file contains example WebSocket configuration options
# with descriptions, examples, and recommended values for different environments.

# =============================================================================
# DEVELOPMENT ENVIRONMENT EXAMPLE
# =============================================================================

# Basic server configuration for development
FLASK_ENV=development
FLASK_HOST=127.0.0.1
FLASK_PORT=5000

# CORS configuration for development (allows local development servers)
SOCKETIO_CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:5000,http://localhost:8080
SOCKETIO_CORS_CREDENTIALS=true

# Transport configuration (both WebSocket and polling for compatibility)
SOCKETIO_TRANSPORTS=websocket,polling

# Relaxed timeouts for development
SOCKETIO_PING_TIMEOUT=60
SOCKETIO_PING_INTERVAL=25

# Client reconnection settings
SOCKETIO_RECONNECTION=true
SOCKETIO_RECONNECTION_ATTEMPTS=5
SOCKETIO_RECONNECTION_DELAY=1000
SOCKETIO_RECONNECTION_DELAY_MAX=5000
SOCKETIO_TIMEOUT=20000

# Development security settings (relaxed for easier debugging)
SOCKETIO_REQUIRE_AUTH=false
SOCKETIO_SESSION_VALIDATION=false
SOCKETIO_RATE_LIMITING=false
SOCKETIO_CSRF_PROTECTION=false

# Development logging (verbose for debugging)
SOCKETIO_LOG_LEVEL=DEBUG
SOCKETIO_LOG_CONNECTIONS=true
SOCKETIO_DEBUG=true
SOCKETIO_ENGINEIO_LOGGER=true

# =============================================================================
# PRODUCTION ENVIRONMENT EXAMPLE
# =============================================================================

# Uncomment and modify these settings for production deployment:

# FLASK_ENV=production
# FLASK_HOST=0.0.0.0
# FLASK_PORT=443

# # Specific CORS origins for production (replace with your domains)
# SOCKETIO_CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com,https://api.yourdomain.com
# SOCKETIO_CORS_CREDENTIALS=true

# # Optimized transport configuration for production
# SOCKETIO_TRANSPORTS=websocket,polling

# # Production timeout settings (more conservative)
# SOCKETIO_PING_TIMEOUT=120
# SOCKETIO_PING_INTERVAL=30

# # Client configuration for production
# SOCKETIO_RECONNECTION=true
# SOCKETIO_RECONNECTION_ATTEMPTS=3
# SOCKETIO_RECONNECTION_DELAY=2000
# SOCKETIO_RECONNECTION_DELAY_MAX=10000
# SOCKETIO_TIMEOUT=30000

# # Production security settings (all enabled)
# SOCKETIO_REQUIRE_AUTH=true
# SOCKETIO_SESSION_VALIDATION=true
# SOCKETIO_RATE_LIMITING=true
# SOCKETIO_CSRF_PROTECTION=true

# # Production performance settings
# SOCKETIO_MAX_CONNECTIONS=5000
# SOCKETIO_CONNECTION_POOL_SIZE=20

# # Production logging (minimal for performance)
# SOCKETIO_LOG_LEVEL=WARNING
# SOCKETIO_LOG_CONNECTIONS=false
# SOCKETIO_DEBUG=false
# SOCKETIO_ENGINEIO_LOGGER=false

# =============================================================================
# MULTI-INSTANCE DEPLOYMENT EXAMPLE
# =============================================================================

# Uncomment these settings for multi-instance deployments with Redis:

# # Redis configuration for session sharing
# REDIS_URL=redis://redis-server:6379/0
# SESSION_STORAGE=redis

# # Async mode optimized for multi-instance
# SOCKETIO_ASYNC_MODE=eventlet

# # Transport configuration optimized for load balancers
# SOCKETIO_TRANSPORTS=polling,websocket

# # Higher connection limits for multi-instance
# SOCKETIO_MAX_CONNECTIONS=10000
# SOCKETIO_CONNECTION_POOL_SIZE=50

# # Health check configuration
# HEALTH_CHECK_ENABLED=true
# WEBSOCKET_HEALTH_CHECK_ENABLED=true

# =============================================================================
# HIGH SECURITY ENVIRONMENT EXAMPLE
# =============================================================================

# Uncomment these settings for high-security environments:

# # Strict CORS configuration
# SOCKETIO_CORS_ORIGINS=https://secure.yourdomain.com
# SOCKETIO_CORS_CREDENTIALS=true
# SOCKETIO_CORS_METHODS=GET,POST
# SOCKETIO_CORS_HEADERS=Content-Type,Authorization

# # All security features enabled
# SOCKETIO_REQUIRE_AUTH=true
# SOCKETIO_SESSION_VALIDATION=true
# SOCKETIO_RATE_LIMITING=true
# SOCKETIO_CSRF_PROTECTION=true

# # Conservative connection limits
# SOCKETIO_MAX_CONNECTIONS=1000
# SOCKETIO_CONNECTION_POOL_SIZE=10

# # Shorter timeouts for security
# SOCKETIO_PING_TIMEOUT=30
# SOCKETIO_PING_INTERVAL=10

# # Enhanced logging for security monitoring
# SOCKETIO_LOG_LEVEL=INFO
# SOCKETIO_LOG_CONNECTIONS=true

# =============================================================================
# CONFIGURATION FIELD REFERENCE
# =============================================================================

# CORS CONFIGURATION
# ------------------
# SOCKETIO_CORS_ORIGINS: Comma-separated list of allowed CORS origins
#   Examples: http://localhost:3000,https://example.com
#   Default: Auto-generated from FLASK_HOST and FLASK_PORT
#   Security: Never use '*' in production

# SOCKETIO_CORS_CREDENTIALS: Whether to allow credentials in CORS requests
#   Examples: true, false
#   Default: true

# SOCKETIO_CORS_METHODS: Comma-separated list of allowed HTTP methods
#   Examples: GET,POST,PUT,DELETE
#   Default: GET,POST

# SOCKETIO_CORS_HEADERS: Comma-separated list of allowed headers
#   Examples: Content-Type,Authorization,X-Custom-Header
#   Default: Content-Type,Authorization

# SERVER CONFIGURATION
# --------------------
# FLASK_HOST: Host address for the Flask application
#   Examples: 127.0.0.1, localhost, 0.0.0.0, example.com
#   Default: 127.0.0.1
#   Production: Use 0.0.0.0 for container deployments

# FLASK_PORT: Port number for the Flask application
#   Examples: 5000, 8080, 443
#   Default: 5000
#   Production: Use 443 for HTTPS, 80 for HTTP

# SOCKETIO CONFIGURATION
# ----------------------
# SOCKETIO_ASYNC_MODE: Async mode for SocketIO server
#   Examples: threading, eventlet, gevent
#   Default: threading
#   Multi-instance: Use eventlet for better performance

# SOCKETIO_TRANSPORTS: Comma-separated list of transport methods
#   Examples: websocket,polling | websocket | polling
#   Default: websocket,polling
#   Load balancer: Use polling,websocket (polling first)

# SOCKETIO_PING_TIMEOUT: Ping timeout in seconds
#   Examples: 60, 120, 30
#   Default: 60
#   Production: Use higher values (120) for stability

# SOCKETIO_PING_INTERVAL: Ping interval in seconds
#   Examples: 25, 30, 15
#   Default: 25
#   Must be less than ping_timeout

# SOCKETIO_MAX_HTTP_BUFFER_SIZE: Maximum HTTP buffer size in bytes
#   Examples: 1000000, 2000000, 500000
#   Default: 1000000

# CLIENT CONFIGURATION
# --------------------
# SOCKETIO_RECONNECTION: Enable automatic reconnection
#   Examples: true, false
#   Default: true

# SOCKETIO_RECONNECTION_ATTEMPTS: Maximum reconnection attempts
#   Examples: 5, 10, 3
#   Default: 5
#   Production: Use lower values (3) to avoid excessive retries

# SOCKETIO_RECONNECTION_DELAY: Initial reconnection delay in milliseconds
#   Examples: 1000, 2000, 500
#   Default: 1000

# SOCKETIO_RECONNECTION_DELAY_MAX: Maximum reconnection delay in milliseconds
#   Examples: 5000, 10000, 3000
#   Default: 5000

# SOCKETIO_TIMEOUT: Connection timeout in milliseconds
#   Examples: 20000, 30000, 10000
#   Default: 20000

# SECURITY CONFIGURATION
# ----------------------
# SOCKETIO_REQUIRE_AUTH: Require authentication for connections
#   Examples: true, false
#   Default: true
#   Production: Always use true

# SOCKETIO_SESSION_VALIDATION: Validate user sessions
#   Examples: true, false
#   Default: true
#   Production: Always use true

# SOCKETIO_RATE_LIMITING: Enable rate limiting
#   Examples: true, false
#   Default: true
#   Production: Always use true

# SOCKETIO_CSRF_PROTECTION: Enable CSRF protection
#   Examples: true, false
#   Default: true
#   Production: Always use true

# PERFORMANCE CONFIGURATION
# -------------------------
# SOCKETIO_MAX_CONNECTIONS: Maximum concurrent connections
#   Examples: 1000, 5000, 100
#   Default: 1000
#   Scale based on server capacity

# SOCKETIO_CONNECTION_POOL_SIZE: Connection pool size
#   Examples: 10, 20, 5
#   Default: 10
#   Multi-instance: Use higher values (20-50)

# LOGGING CONFIGURATION
# ---------------------
# SOCKETIO_LOG_LEVEL: Log level for WebSocket operations
#   Examples: DEBUG, INFO, WARNING, ERROR
#   Default: INFO
#   Development: DEBUG, Production: WARNING

# SOCKETIO_LOG_CONNECTIONS: Log connection events
#   Examples: true, false
#   Default: false
#   Development: true, Production: false (performance)

# DEVELOPMENT CONFIGURATION
# -------------------------
# SOCKETIO_DEBUG: Enable debug mode
#   Examples: true, false
#   Default: false
#   Development: true, Production: false

# SOCKETIO_ENGINEIO_LOGGER: Enable Engine.IO logger
#   Examples: true, false
#   Default: false
#   Development: true for detailed debugging

# =============================================================================
# VALIDATION AND HEALTH CHECKING
# =============================================================================

# Use the WebSocket Configuration CLI tool for validation and health checking:

# # Validate current configuration
# python websocket_config_cli.py validate

# # Validate specific environment file
# python websocket_config_cli.py validate --env-file .env.production

# # Perform health check
# python websocket_config_cli.py health

# # Start continuous health monitoring
# python websocket_config_cli.py health --monitor --interval 60

# # Generate configuration documentation
# python websocket_config_cli.py docs reference --output websocket_config.md

# # Migrate legacy configuration
# python websocket_config_cli.py migrate legacy_to_v1 --env-file .env

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Common issues and solutions:

# 1. CORS Connection Failures:
#    - Check SOCKETIO_CORS_ORIGINS includes your client domain
#    - Verify FLASK_HOST and FLASK_PORT match your server
#    - Ensure SOCKETIO_CORS_CREDENTIALS is set correctly

# 2. Connection Timeouts:
#    - Increase SOCKETIO_PING_TIMEOUT value
#    - Adjust SOCKETIO_PING_INTERVAL for network conditions
#    - Check network infrastructure stability

# 3. Authentication Failures:
#    - Verify SOCKETIO_REQUIRE_AUTH setting
#    - Check SOCKETIO_SESSION_VALIDATION configuration
#    - Ensure session backend is properly configured

# 4. Performance Issues:
#    - Optimize SOCKETIO_MAX_CONNECTIONS for server capacity
#    - Adjust SOCKETIO_CONNECTION_POOL_SIZE
#    - Consider Redis for multi-instance deployments

# For more help, run: python websocket_config_cli.py docs troubleshooting