# Docker Compose configuration for Vedfolnir with MySQL
# This replaces any SQLite-based Docker configurations

version: '3.8'

services:
  # Main Vedfolnir application
  vedfolnir:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    image: vedfolnir:latest
    container_name: vedfolnir_app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      # Flask Configuration
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      
      # MySQL Configuration
      - DATABASE_URL=mysql+pymysql://vedfolnir:${MYSQL_PASSWORD}@mysql:3306/vedfolnir?charset=utf8mb4
      - DB_TYPE=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=vedfolnir
      - DB_USER=vedfolnir
      - DB_PASSWORD=${MYSQL_PASSWORD}
      
      # Redis Configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # Ollama Configuration
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=llava:7b
      
      # Security
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - PLATFORM_ENCRYPTION_KEY=${PLATFORM_ENCRYPTION_KEY}
      
      # Application Settings
      - LOG_LEVEL=INFO
      - PRODUCTION_MODE=true
      - DOCKER_DEPLOYMENT=true
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
      - ./backups:/app/backups
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - vedfolnir_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: vedfolnir_mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=vedfolnir
      - MYSQL_USER=vedfolnir
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    ports:
      - "127.0.0.1:3306:3306"  # Only bind to localhost for security
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/conf.d:/etc/mysql/conf.d:ro
      - ./docker/mysql/init:/docker-entrypoint-initdb.d:ro
      - ./backups/mysql:/backups
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=512M
      --innodb-log-file-size=128M
      --max-connections=200
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2
      --log-queries-not-using-indexes=1
    networks:
      - vedfolnir_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "vedfolnir", "-p${MYSQL_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache and Session Storage
  redis:
    image: redis:7-alpine
    container_name: vedfolnir_redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost for security
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    networks:
      - vedfolnir_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: vedfolnir_ollama
    restart: unless-stopped
    ports:
      - "127.0.0.1:11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
    networks:
      - vedfolnir_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: vedfolnir_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - vedfolnir
    networks:
      - vedfolnir_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - with-nginx  # Optional service, enable with --profile with-nginx

# Persistent Volumes
volumes:
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mysql
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  ollama_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/ollama

# Network Configuration
networks:
  vedfolnir_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
